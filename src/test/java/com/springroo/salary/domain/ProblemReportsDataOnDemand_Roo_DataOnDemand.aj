// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springroo.salary.domain;

import com.springroo.salary.domain.ProblemChoices;
import com.springroo.salary.domain.ProblemReports;
import com.springroo.salary.domain.ProblemReportsDataOnDemand;
import com.springroo.salary.domain.ProblemStatus;
import com.springroo.salary.domain.Users;
import com.springroo.salary.domain.UsersDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProblemReportsDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProblemReportsDataOnDemand: @Component;
    
    private Random ProblemReportsDataOnDemand.rnd = new SecureRandom();
    
    private List<ProblemReports> ProblemReportsDataOnDemand.data;
    
    @Autowired
    private UsersDataOnDemand ProblemReportsDataOnDemand.usersDataOnDemand;
    
    public ProblemReports ProblemReportsDataOnDemand.getNewTransientProblemReports(int index) {
        ProblemReports obj = new ProblemReports();
        setMessages(obj, index);
        setName(obj, index);
        setProblemChoices(obj, index);
        setProblemStatus(obj, index);
        setTopic(obj, index);
        setWrite_date(obj, index);
        return obj;
    }
    
    public void ProblemReportsDataOnDemand.setName(ProblemReports obj, int index) {
        Users name = usersDataOnDemand.getRandomUsers();
        obj.setName(name);
    }
    
    public void ProblemReportsDataOnDemand.setProblemChoices(ProblemReports obj, int index) {
        ProblemChoices problemChoices = ProblemChoices.class.getEnumConstants()[0];
        obj.setProblemChoices(problemChoices);
    }
    
    public void ProblemReportsDataOnDemand.setProblemStatus(ProblemReports obj, int index) {
        ProblemStatus problemStatus = ProblemStatus.class.getEnumConstants()[0];
        obj.setProblemStatus(problemStatus);
    }
    
    public void ProblemReportsDataOnDemand.setWrite_date(ProblemReports obj, int index) {
        String write_date = "write_date_" + index;
        obj.setWrite_date(write_date);
    }
    
    public ProblemReports ProblemReportsDataOnDemand.getSpecificProblemReports(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ProblemReports obj = data.get(index);
        Long id = obj.getId();
        return ProblemReports.findProblemReports(id);
    }
    
    public ProblemReports ProblemReportsDataOnDemand.getRandomProblemReports() {
        init();
        ProblemReports obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return ProblemReports.findProblemReports(id);
    }
    
    public boolean ProblemReportsDataOnDemand.modifyProblemReports(ProblemReports obj) {
        return false;
    }
    
    public void ProblemReportsDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ProblemReports.findProblemReportsEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ProblemReports' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ProblemReports>();
        for (int i = 0; i < 10; i++) {
            ProblemReports obj = getNewTransientProblemReports(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
