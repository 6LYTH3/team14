// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springroo.salary.domain;

import com.springroo.salary.domain.AdvancedPayments;
import com.springroo.salary.domain.AdvancedPaymentsDataOnDemand;
import com.springroo.salary.domain.Users;
import com.springroo.salary.domain.UsersDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AdvancedPaymentsDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AdvancedPaymentsDataOnDemand: @Component;
    
    private Random AdvancedPaymentsDataOnDemand.rnd = new SecureRandom();
    
    private List<AdvancedPayments> AdvancedPaymentsDataOnDemand.data;
    
    @Autowired
    private UsersDataOnDemand AdvancedPaymentsDataOnDemand.usersDataOnDemand;
    
    public AdvancedPayments AdvancedPaymentsDataOnDemand.getNewTransientAdvancedPayments(int index) {
        AdvancedPayments obj = new AdvancedPayments();
        setAmount(obj, index);
        setAmoutDate(obj, index);
        setApprove(obj, index);
        setDateWrite(obj, index);
        setPid(obj, index);
        setReason(obj, index);
        setReasonNotApprove(obj, index);
        return obj;
    }
    
    public void AdvancedPaymentsDataOnDemand.setAmoutDate(AdvancedPayments obj, int index) {
        Date amoutDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setAmoutDate(amoutDate);
    }
    
    public void AdvancedPaymentsDataOnDemand.setApprove(AdvancedPayments obj, int index) {
        Boolean approve = Boolean.TRUE;
        obj.setApprove(approve);
    }
    
    public void AdvancedPaymentsDataOnDemand.setPid(AdvancedPayments obj, int index) {
        Users pid = usersDataOnDemand.getRandomUsers();
        obj.setPid(pid);
    }
    
    public void AdvancedPaymentsDataOnDemand.setReasonNotApprove(AdvancedPayments obj, int index) {
        String reasonNotApprove = "reasonNotApprove_" + index;
        if (reasonNotApprove.length() > 300) {
            reasonNotApprove = reasonNotApprove.substring(0, 300);
        }
        obj.setReasonNotApprove(reasonNotApprove);
    }
    
    public AdvancedPayments AdvancedPaymentsDataOnDemand.getSpecificAdvancedPayments(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        AdvancedPayments obj = data.get(index);
        Long id = obj.getId();
        return AdvancedPayments.findAdvancedPayments(id);
    }
    
    public AdvancedPayments AdvancedPaymentsDataOnDemand.getRandomAdvancedPayments() {
        init();
        AdvancedPayments obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return AdvancedPayments.findAdvancedPayments(id);
    }
    
    public boolean AdvancedPaymentsDataOnDemand.modifyAdvancedPayments(AdvancedPayments obj) {
        return false;
    }
    
    public void AdvancedPaymentsDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = AdvancedPayments.findAdvancedPaymentsEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'AdvancedPayments' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<AdvancedPayments>();
        for (int i = 0; i < 10; i++) {
            AdvancedPayments obj = getNewTransientAdvancedPayments(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
