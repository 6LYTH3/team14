// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springroo.salary.domain;

import com.springroo.salary.domain.ProblemChoices;
import com.springroo.salary.domain.ProblemReports;
import com.springroo.salary.domain.ProblemStatus;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect ProblemReports_Roo_Finder {
    
    public static TypedQuery<ProblemReports> ProblemReports.findProblemReportsesByProblemChoices(ProblemChoices problemChoices) {
        if (problemChoices == null) throw new IllegalArgumentException("The problemChoices argument is required");
        EntityManager em = ProblemReports.entityManager();
        TypedQuery<ProblemReports> q = em.createQuery("SELECT o FROM ProblemReports AS o WHERE o.problemChoices = :problemChoices", ProblemReports.class);
        q.setParameter("problemChoices", problemChoices);
        return q;
    }
    
    public static TypedQuery<ProblemReports> ProblemReports.findProblemReportsesByProblemStatus(ProblemStatus problemStatus) {
        if (problemStatus == null) throw new IllegalArgumentException("The problemStatus argument is required");
        EntityManager em = ProblemReports.entityManager();
        TypedQuery<ProblemReports> q = em.createQuery("SELECT o FROM ProblemReports AS o WHERE o.problemStatus = :problemStatus", ProblemReports.class);
        q.setParameter("problemStatus", problemStatus);
        return q;
    }
    
    public static TypedQuery<ProblemReports> ProblemReports.findProblemReportsesByTopicLike(String topic) {
        if (topic == null || topic.length() == 0) throw new IllegalArgumentException("The topic argument is required");
        topic = topic.replace('*', '%');
        if (topic.charAt(0) != '%') {
            topic = "%" + topic;
        }
        if (topic.charAt(topic.length() - 1) != '%') {
            topic = topic + "%";
        }
        EntityManager em = ProblemReports.entityManager();
        TypedQuery<ProblemReports> q = em.createQuery("SELECT o FROM ProblemReports AS o WHERE LOWER(o.topic) LIKE LOWER(:topic)", ProblemReports.class);
        q.setParameter("topic", topic);
        return q;
    }
    
}
